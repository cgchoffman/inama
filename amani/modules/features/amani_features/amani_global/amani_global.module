<?php
/**
 * @file
 * Code for the Amani: Global feature.
 */

include_once 'amani_global.features.inc';

/**
 * Implements hook_menu().
 */
function amani_global_menu() {

  $items['amani/site-info'] = array(
    'title' => 'Amani site settings',
    'description' => 'Manage site name, e-mail address, slogan, logo and favicon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amani_site_information_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => 0,
  );

  $items['home'] = array(
    'title' => 'Home Page',
    'description' => 'Default home page.',
    'page callback' => 'amani_global_home_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Home page callback.
 */
function amani_global_home_page() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function amani_global_block_info() {
  return array(
    'add_content_links' => array(
      'info' => t('Amani: add content links'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function amani_global_block_view($delta = '') {

  switch ($delta) {
    case 'add_content_links':
      $block['subject'] = t('Manage logo & site info');
      $block['content'] = amani_global_add_content_links();
      break;
  }

  return $block;
}

/**
 * Return html for add_content_links block.
 */
function amani_global_add_content_links() {
  $output = '';

  // Manage logo and tagline (site slogan)
  if (user_access('administer site configuration')) {
    $items['items'] = array(
      l('Manage site logo and info', 'amani/site-info'),
      l('Edit map settings', 'admin/config/incident-reports'),
    );
    $output = '<div class="manage-logo">'
      . theme('item_list', $items)
      . '</div>';
  }

  // Add content links
  $item = menu_get_item('node/add');
  $content = system_admin_menu_block($item);
  if ($content) {
    $output .= '<div><span class="node-type-list">Add new content</span><ul>';
    foreach ($content as $item) {
      $output .= '<li>' . l('Add ' . $item['title'], $item['href'], $item['localized_options']) . '</li>';
    }
    $output .= '</ul><div>';
  }

  return $output;
}

/**
 * Form builder; selected elements from the general site information form
 * and the theme configuration form (logo and favicon upload).
 *
 * @param $key
 *   A theme name.
 * @return
 *   The form structure.
 * @ingroup forms
 * @see system_site_information_settings()
 * @see system_theme_settings_submit()
 */
function amani_site_information_settings($form, &$form_state, $key = 'peace') {

  $form['site_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site details'),
  );
  $form['site_information']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name'),
    '#default_value' => variable_get('site_name', 'Drupal'),
    '#required' => TRUE
  );
  $form['site_information']['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => t('Tagline'),
    '#default_value' => variable_get('site_slogan', ''),
    '#description' => t("This text will be displayed under the logo."),
  );
  $form['site_information']['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
    '#description' => t("The <em>From</em> address in automated e-mails sent during registration and new password requests, and other notifications. (Use an address ending in your site's domain to help prevent this e-mail being flagged as spam.)"),
    '#required' => TRUE,
  );

  $form['var'] = array('#type' => 'hidden', '#value' => 'theme_' . $key . '_settings');

  $form['logo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logo image settings'),
    '#attributes' => array('class' => array('theme-settings-bottom')),
  );
  $form['logo']['default_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the default logo'),
    '#default_value' => theme_get_setting('default_logo', $key),
    '#tree' => FALSE,
    '#description' => t('Check here if you want the theme to use the logo supplied with it.')
  );
  $form['logo']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the logo settings when using the default logo.
      'invisible' => array(
        'input[name="default_logo"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['logo']['settings']['logo_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to custom logo'),
    '#default_value' => theme_get_setting('logo_path', $key),
    '#access' => FALSE,
  );
  $form['logo']['settings']['logo_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload new logo image'),
    '#maxlength' => 40,
    '#description' => t("Use this field to upload your own logo.")
  );

  $form['favicon'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shortcut icon settings'),
    '#description' => t("Your shortcut icon, or 'favicon', is displayed in the address bar and bookmarks of most browsers."),
  );
  $form['favicon']['default_favicon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the default shortcut icon.'),
    '#default_value' => theme_get_setting('default_favicon', $key),
    '#description' => t('Check here if you want the theme to use the default shortcut icon.')
  );
  $form['favicon']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the favicon settings when using the default favicon.
      'invisible' => array(
        'input[name="default_favicon"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['favicon']['settings']['favicon_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to custom icon'),
    '#default_value' => theme_get_setting('favicon_path', $key),
    '#access' => FALSE,
  );
  $form['favicon']['settings']['favicon_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload new icon image'),
    '#description' => t("Use this field to upload your own shortcut icon.")
  );

  // Inject human-friendly values for logo and favicon.
  foreach (array('logo' => 'logo.png', 'favicon' => 'favicon.ico') as $type => $default) {
    if (isset($form[$type]['settings'][$type . '_path'])) {
      $element = &$form[$type]['settings'][$type . '_path'];

      // If path is a public:// URI, display the path relative to the files
      // directory; stream wrappers are not end-user friendly.
      $original_path = $element['#default_value'];
      $friendly_path = NULL;
      if (file_uri_scheme($original_path) == 'public') {
        $friendly_path = file_uri_target($original_path);
        $element['#default_value'] = $friendly_path;
      }
    }
  }

  $form = system_settings_form($form);
  // We don't want to call system_settings_form_submit(), so change #submit.
  array_pop($form['#submit']);
  $form['#submit'][] = 'amani_theme_settings_submit';
  $form['#validate'][] = 'amani_theme_settings_validate';
  return $form;
}

/**
 * Validator for the amani_theme_settings() form.
 */
function amani_theme_settings_validate($form, &$form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());

  // Check for a new uploaded logo.
  $file = file_save_upload('logo_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('logo_upload', t('The logo could not be uploaded.'));
    }
  }

  $validators = array('file_validate_extensions' => array('ico png gif jpg jpeg apng svg'));

  // Check for a new uploaded favicon.
  $file = file_save_upload('favicon_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['favicon_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('favicon_upload', t('The favicon could not be uploaded.'));
    }
  }

}

/**
 * Process amani_theme_settings form submissions.
 */
function amani_theme_settings_submit($form, &$form_state) {
  // Exclude unnecessary elements before saving.
  form_state_values_clean($form_state);

  $values = $form_state['values'];

  // Save the site info then remove from array to save theme info.
  foreach (element_children($form['site_information']) as $name) {
    variable_set($name, $values[$name]);
    unset($values[$name]);
  }

  // Extract the name of the theme from the submitted form values, then remove
  // it from the array so that it is not saved as part of the variable.
  $key = $values['var'];
  unset($values['var']);

  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  if ($file = $values['logo_upload']) {
    unset($values['logo_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_logo'] = 0;
    $values['logo_path'] = $filename;
    $values['toggle_logo'] = 1;
  }
  if ($file = $values['favicon_upload']) {
    unset($values['favicon_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_favicon'] = 0;
    $values['favicon_path'] = $filename;
    $values['toggle_favicon'] = 1;
  }

  module_load_include('inc', 'system', 'system.admin');
  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_path'])) {
    $values['logo_path'] = _system_theme_settings_validate_path($values['logo_path']);
  }
  if (!empty($values['favicon_path'])) {
    $values['favicon_path'] = _system_theme_settings_validate_path($values['favicon_path']);
  }

  if (empty($values['default_favicon']) && !empty($values['favicon_path'])) {
    $values['favicon_mimetype'] = file_get_mimetype($values['favicon_path']);
  }

  variable_set($key, $values);
  drupal_set_message(t('The configuration options have been saved.'));

  cache_clear_all();
}
